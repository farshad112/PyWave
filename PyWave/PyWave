#!/bin/python
###########################################################################################
# Program: PyWave
# Description:  Draw clk and other wave shapes easily from command line or gui interface
#               usng python
# Author:       Farshad
# Date:         15-04-2017
###########################################################################################
###################################### LICENSE ############################################
'''
copyright 2017 Farshad Bin Fazle 

                  GNU LESSER GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.


  This version of the GNU Lesser General Public License incorporates
the terms and conditions of version 3 of the GNU General Public
License, supplemented by the additional permissions listed below.

  0. Additional Definitions.

  As used herein, "this License" refers to version 3 of the GNU Lesser
General Public License, and the "GNU GPL" refers to version 3 of the GNU
General Public License.

  "The Library" refers to a covered work governed by this License,
other than an Application or a Combined Work as defined below.

  An "Application" is any work that makes use of an interface provided
by the Library, but which is not otherwise based on the Library.
Defining a subclass of a class defined by the Library is deemed a mode
of using an interface provided by the Library.

  A "Combined Work" is a work produced by combining or linking an
Application with the Library.  The particular version of the Library
with which the Combined Work was made is also called the "Linked
Version".

  The "Minimal Corresponding Source" for a Combined Work means the
Corresponding Source for the Combined Work, excluding any source code
for portions of the Combined Work that, considered in isolation, are
based on the Application, and not on the Linked Version.

  The "Corresponding Application Code" for a Combined Work means the
object code and/or source code for the Application, including any data
and utility programs needed for reproducing the Combined Work from the
Application, but excluding the System Libraries of the Combined Work.

  1. Exception to Section 3 of the GNU GPL.

  You may convey a covered work under sections 3 and 4 of this License
without being bound by section 3 of the GNU GPL.

  2. Conveying Modified Versions.

  If you modify a copy of the Library, and, in your modifications, a
facility refers to a function or data to be supplied by an Application
that uses the facility (other than as an argument passed when the
facility is invoked), then you may convey a copy of the modified
version:

   a) under this License, provided that you make a good faith effort to
   ensure that, in the event an Application does not supply the
   function or data, the facility still operates, and performs
   whatever part of its purpose remains meaningful, or

   b) under the GNU GPL, with none of the additional permissions of
   this License applicable to that copy.

  3. Object Code Incorporating Material from Library Header Files.

  The object code form of an Application may incorporate material from
a header file that is part of the Library.  You may convey such object
code under terms of your choice, provided that, if the incorporated
material is not limited to numerical parameters, data structure
layouts and accessors, or small macros, inline functions and templates
(ten or fewer lines in length), you do both of the following:

   a) Give prominent notice with each copy of the object code that the
   Library is used in it and that the Library and its use are
   covered by this License.

   b) Accompany the object code with a copy of the GNU GPL and this license
   document.

  4. Combined Works.

  You may convey a Combined Work under terms of your choice that,
taken together, effectively do not restrict modification of the
portions of the Library contained in the Combined Work and reverse
engineering for debugging such modifications, if you also do each of
the following:

   a) Give prominent notice with each copy of the Combined Work that
   the Library is used in it and that the Library and its use are
   covered by this License.

   b) Accompany the Combined Work with a copy of the GNU GPL and this license
   document.

   c) For a Combined Work that displays copyright notices during
   execution, include the copyright notice for the Library among
   these notices, as well as a reference directing the user to the
   copies of the GNU GPL and this license document.

   d) Do one of the following:

       0) Convey the Minimal Corresponding Source under the terms of this
       License, and the Corresponding Application Code in a form
       suitable for, and under terms that permit, the user to
       recombine or relink the Application with a modified version of
       the Linked Version to produce a modified Combined Work, in the
       manner specified by section 6 of the GNU GPL for conveying
       Corresponding Source.

       1) Use a suitable shared library mechanism for linking with the
       Library.  A suitable mechanism is one that (a) uses at run time
       a copy of the Library already present on the user's computer
       system, and (b) will operate properly with a modified version
       of the Library that is interface-compatible with the Linked
       Version.

   e) Provide Installation Information, but only if you would otherwise
   be required to provide such information under section 6 of the
   GNU GPL, and only to the extent that such information is
   necessary to install and execute a modified version of the
   Combined Work produced by recombining or relinking the
   Application with a modified version of the Linked Version. (If
   you use option 4d0, the Installation Information must accompany
   the Minimal Corresponding Source and Corresponding Application
   Code. If you use option 4d1, you must provide the Installation
   Information in the manner specified by section 6 of the GNU GPL
   for conveying Corresponding Source.)

  5. Combined Libraries.

  You may place library facilities that are a work based on the
Library side by side in a single library together with other library
facilities that are not Applications and are not covered by this
License, and convey such a combined library under terms of your
choice, if you do both of the following:

   a) Accompany the combined library with a copy of the same work based
   on the Library, uncombined with any other library facilities,
   conveyed under the terms of this License.

   b) Give prominent notice with the combined library that part of it
   is a work based on the Library, and explaining where to find the
   accompanying uncombined form of the same work.

  6. Revised Versions of the GNU Lesser General Public License.

  The Free Software Foundation may publish revised and/or new versions
of the GNU Lesser General Public License from time to time. Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.

  Each version is given a distinguishing version number. If the
Library as you received it specifies that a certain numbered version
of the GNU Lesser General Public License "or any later version"
applies to it, you have the option of following the terms and
conditions either of that published version or of any later version
published by the Free Software Foundation. If the Library as you
received it does not specify a version number of the GNU Lesser
General Public License, you may choose any version of the GNU Lesser
General Public License ever published by the Free Software Foundation.

  If the Library as you received it specifies that a proxy can decide
whether future versions of the GNU Lesser General Public License shall
apply, that proxy's public statement of acceptance of any version is
permanent authorization for you to choose that version for the
Library.
'''
###################################################################################


# Library imports

from pkg_resources import WorkingSet, DistributionNotFound
from PIL import Image, ImageDraw
from PIL import ImageFont

##############################################################################
# Function:     check_if_module_installed
# Description:  Check Whether a particular module is installed or not. if the
#               module is not installed then install it
##############################################################################
def check_if_module_installed(debug_msg, module_name, module_version):
    workingset = WorkingSet()

    # printing all installed modules
    if debug_msg:
        print( tuple(workingset))
    # Detecting if required module is installed or not
    required_module = module_name + '>=' + module_version
    if debug_msg:
        print(required_module)
    try:

        dep = workingset.require('Pillow>=4.1.0')
        print("module: "+ module_name+ " is present.")
    except DistributionNotFound:
        # Installed it with easy install
        from setuptools.command.easy_install import main as install
        install([module_name])

################################################################################################
# Function:     draw_marker
# Description:  draws marker over specified x and y axis
#
# Parameters:   img             :   An object of image
#               marker_color    :   A String containing RGB hexadecimal value for defining
#                                   marker color
#               coordinates     :   A tuple containing x and y corodinate to place the marker
# Return type:  none
################################################################################################
def draw_marker (img, marker_color, coordinates):
    img_width, img_height = img.size
    x_pos, y_pos = coordinates
    draw = ImageDraw.Draw(img)
    # draw marker
    draw.line([(x_pos, offset_y), (x_pos, img_height - offset_y)], width = 1, fill = marker_color)
    img.show()


################################################################################################
# Function:     draw_axis
# Description:  draws X and Y axis
#
# Parameters:   img             :   An object of image
#               border_color    :   A String containing RGB hexadecimal value for defining
#                                   border color
#               offset          :   border offset in pixels
# Return type:  none
################################################################################################
def draw_axis(img, border_color, offset):
    img_width,img_height = img.size
    draw = ImageDraw.Draw(img)
    # draw x axis
    draw.line([(offset, 0),(offset, img_height-offset)], width= 3, fill=border_color)
    # draw y axis
    draw.line([(offset, img_height-offset),(img_width, img_height-offset)], width= 3, fill=border_color)
    img.show()
    
################################################################################################
# Function:     draw_clk
# Description:  draws clock signal of desired length.
#
# Parameters:   img             :   An object of image
#               signal_color    :   A String containing RGB hexadecimal value for defining
#                                   signal color
#               start_position  :   A tuple containing (x,y) coordinates of start position
#               end_position    :   A tuple containing (x,y) coordinates of end position
#               clk_pulse1_width:   An integer for defining clk_pulse1_width in pixels. default value is 50px
#               clk_pulse0_width:   An integer for defining clk_pulse0_width in pixels. default value is 50px
#               clk_pulse_height:   An integer for defining clk_pulse_height in pixels. default value is 20px
#                                        _________________                  _________________
#                                       |                 |                |                 |
#                       ________________|                 |________________|                 |_______
#                                       <-clkPulse1Width-><-clkPulse0Width->
# Return type:  none
################################################################################################
def draw_clk( img, start_position, end_position, signal_color, clk_pulse1_width = 50, clk_pulse0_width = 50, clk_pulse_height=20):
    # get start and finish x and y coordinates
    start_x_pos, start_y_pos = start_position
    end_x_pos, end_y_pos = end_position
    # Calculate the clock cycle width in pixels
    clk_cycle_width = clk_pulse1_width + clk_pulse0_width
    # Calculate the total number of clock cycles
    clock_cycle_number = int((end_x_pos - start_x_pos) / clk_cycle_width)
    print("clock_cycle_number: "+ str(clock_cycle_number))
    # Open the image object in ImageDraw
    draw = ImageDraw.Draw(img)
    clk_cycle_counter = 0
    # draw the clock signal at the specified coordinate
    cur_x_pos = start_x_pos
    cur_y_pos = start_y_pos

    #
    #                  (x1,y2)           (x2,y2)
    #                    _________________
    #                   |                 |
    #   ________________|                 |
    #  (x0,y0)         (x1,y1)          (x2, y1)
    while clk_cycle_counter <= clock_cycle_number:
        # collect the first negedge point
        clk_negedge_time_points.append((cur_x_pos, cur_y_pos))
        # Draw the 0 clk line i.e. (x0,y0) to (x1,y1)
        draw.line([(cur_x_pos, cur_y_pos), (cur_x_pos + clk_pulse0_width, cur_y_pos)], width= 2, fill= signal_color)
        # Update the current x position
        cur_x_pos = cur_x_pos + clk_pulse0_width
        # collect the first posedge point
        clk_posedge_time_points.append((cur_x_pos, cur_y_pos))
        # Draw the vertical up line (y position is in upward direction so (-) sign is used) i.e. (x1,y1) to (x1,y2)
        draw.line([(cur_x_pos, cur_y_pos), (cur_x_pos, cur_y_pos - clk_pulse_height)], width= 2, fill= signal_color)
        # Update the current y position
        cur_y_pos = cur_y_pos - clk_pulse_height
        # Draw the horizontal 1 clk line i.e. (x1,y2) to (x2,y2)
        draw.line([(cur_x_pos, cur_y_pos), (cur_x_pos + clk_pulse1_width, cur_y_pos)], width = 2, fill = signal_color)
        # Update the current x position
        cur_x_pos = cur_x_pos + clk_pulse1_width
        # collect the second negedge point
        clk_negedge_time_points.append((cur_x_pos,cur_y_pos))
        # Draw the vertical down line i.e. (x2,y2) to (x2,y1)
        draw.line([(cur_x_pos, cur_y_pos), (cur_x_pos, cur_y_pos + clk_pulse_height)], width = 2, fill = signal_color)
        # Update the current y position
        cur_y_pos = cur_y_pos + clk_pulse_height
        clk_cycle_counter = clk_cycle_counter + 1
    img.show()


################################################################################################
# Function:     draw_pulse
# Description:  draws pulse signal of desired length.
#
# Parameters:   img             :   An object of image
#               signal_color    :   A String containing RGB hexadecimal value for defining
#                                   signal color
#               signal_position :   A tuple containing (x,y) coordinates of start position
#               end_position    :   A tuple containing (x,y) coordinates of end position
#               transition_value:   A string defines 1 to 1 logic
#               clk_pulse1_width:   An integer for defining clk_pulse1_width in pixels. default value is 50px
#               clk_pulse0_width:   An integer for defining clk_pulse0_width in pixels. default value is 50px
#               clk_pulse_height:   An integer for defining clk_pulse_height in pixels. default value is 20px
#
#                                        _________________                  _________________
#                                       |                 |                |                 |
#                       ________________|                 |________________|                 |_______
#
#
#                                        _________________
#                                       |                 |
#                       ________________|                 |___________________________________________
# Return type:  none
################################################################################################

    
################################################################################################
# Function:     write_text
# Description:  Selects font type and font-size and write texts in the images
#
# Parameters:   img             :   An object of image
#               font_name       :   A String for selecting available fonts
#               font_size       :   An Integer for setting the font size
#               font_color      :   A tuple to Define the font color in RGB code i.e. white = (255,255,255)
#               wr_text         :   A String to define the text to be written
#               text_position   :   A tuple (x,y) to define the starting position of the text
# Return type:  none
################################################################################################
def write_text(img, font_name, font_size, font_color, wr_text, text_position):
    # select the font type and size
    font = ImageFont.truetype(font_name, font_size)
    # open the image in edit mode
    draw = ImageDraw.Draw(img)
    # add the text to the specified position in the image
    draw.text(text_position, wr_text, font_color, font=font)
    img.show()


################################################################################################
# Function:     create_new_image
# Description:  Create a new image with specified height, width, background color
#               and Transparency
# Parameters:   height  : An Integer to define height of the image
#               width   : An Integer to define width of the image
#               bg_color: A tuple containing "RGBA" color code for image background
#                         and transparency i.e. red = (255, 0, 0, 0), yellow = (255,255,0,0)
# Return type:  image object
################################################################################################
def create_new_image(height, width, bg_color):
    img = Image.new('RGBA',(height,width), bg_color)
    assert isinstance(img, object)
    return img

################################################################################################
# Function:     create_grid
# Description:  Create a grid on a image
# Parameters:   img: An image object
#               height: An Integar to define hight of the image
#               width:  An Integar to define width of the image
#               grid_color: A String contains rgb color for defining grid color
#               grid_spacing: An Integer to define the spacing of the grid_boxes
# Return type:  none
################################################################################################
def create_grid(img, height, width, grid_color, grid_spacing):
    # Open the image object in ImageDraw
    draw = ImageDraw.Draw(img)
    x = 0   # Starting point on X Axis
    y = 0   # Starting point on Y Axis
    #Draw the row and column lines
    while y <= height and x <= width:
        #Draw the line in Y axis
        draw.line([(x, 0),(x, height)], fill=grid_color)
        #Draw line in X axis
        draw.line([(0,y),(width,y)], fill=grid_color)
        x = x+grid_spacing
        y = y+grid_spacing
    img.show()


################################################################################################
# Function:     save_image
# Description:  Saves the image at specified location (default location is the directory where
#               the script is located) and in specified format (default is png)
#
# Parameters:   img :           image object to save
#               path:           Specified absolute path to save image
#               save_file_name: An String specifying the save file name and format of the image
#               (i.e. new_image.png, new_image.jpeg etc)
#
# Return type:  None
################################################################################################
def save_image(img, path, save_file_name):
    save_path = path + '\\' + save_file_name
    img.save(save_path)

###########################################################################
# Function:     main
# Description:  Start point of Program
###########################################################################
def main () :
    # Check if Pillow is present
    check_if_module_installed(True, 'Pillow', '4.1.0')

    # Create new image
    image = create_new_image(1024,1024,(255,255,0,0))
    # Draw grid line
    # create_grid( image, 1024, 1024, "#FF0000", 100 )

    # Draw border across signals
    draw_axis(image, '#FF00FF', offset_x)
    # add a level
    
    # Draw clock
    draw_clk(image, (200, 200), (800, 200), "#FFFFFF")
    
    # Draw markers along posedge of clk
    for i in clk_posedge_time_points:
        draw_marker(image, "#FF000F", i)
    # Draw markers along negedge of clk
    for i in clk_negedge_time_points:
        draw_marker(image,"#FF00F0", i)
    # Save image
    save_image(image, "C:\\Users\Farshad\Documents", "MyImage.png")


#******************* Instantiation of main() method **************************#
# global variables
offset_x = 100
offset_y = 100
clk_negedge_time_points = []  # collects the (x,y) coordinates of clk negedges
clk_posedge_time_points = []  # collects the (x,y) coordinates of clk posedges
if __name__=="__main__": main()